#!/usr/bin/env ruby
# frozen_string_literal: true

$stdout.sync = $stderr.sync = true
$name = Process.setproctitle(File.basename(Process.argv0))

if ARGV.index('-h') || ARGV.index('--help')
  puts <<~HELP
    Usage: #{$name} [options] <png_image>

    Options:
          --host <address>       target host address (default 127.0.0.1)
      -p, --port <port>          target port (default 1234)
      -c, --connections <count>  count of connections (default 4)
      -m, --mode <mode>          select pixel encoding (TEXT | BIN)
      -t, --threads              use threads instead of processes
      -x, --transpose-x <x>      transpose image <x> pixels
      -y, --transpose-y <y>      transpose image <y> pixels
      -h, --help                 print this help
      -v, --version              print version information
  HELP
  exit
end

if ARGV.index('-v') || ARGV.index('--version')
  require_relative('../lib/pixelflut/version')
  puts("#{$name} - Pixelflut v#{Pixelflut::VERSION}")
  exit
end

def die!(msg, code: 1)
  $stderr.puts("#{$name}: #{msg}")
  exit(code)
end

die!('argument missing') if ARGV.empty?

require_relative('../lib/pixelflut')

module Configuration
  class << self
    attr_reader :use_threads

    def address
      require_relative('../lib/pixelflut/sender')
      Pixelflut::Sender.as_address(@host || '127.0.0.1', @port || 1234)
    end

    private

    def invalid(value, name)
      die!("value for #{name} missing") if value.nil?
      die!("invalid value for #{name} - '#{value}'")
    end

    def as_str(value, name)
      value.nil? || value.empty? ? invalid(value, name) : value
    end

    def as_uint(value, name)
      (ret = value.to_i).positive? ? ret : invalid(value, name)
    end

    def as_mode(value, name)
      %w[text bin].include?(v = value.downcase) ? v : invalid(value, name)
    end
  end

  until ARGV.empty?
    case arg = ARGV.shift
    when '--host'
      @host = as_str(ARGV.shift, 'host')
    when '-p', '--port'
      @port = as_uint(ARGV.shift, 'port')
    when '-c', '--connections'
      Pixelflut.count = as_uint(ARGV.shift, 'connections')
      die!("too many connections - #{Pixelflut.count}") if Pixelflut.count > 255
    when '-m', '--mode', '--pixel'
      Pixelflut.mode = as_mode(ARGV.shift, 'mode')
    when '-t', '--use-threads'
      @use_threads = true
    when '-x', '--transpose-x'
      Pixelflut.delta_x = ARGV.shift.to_i
    when '-y', '--transpose-y'
      Pixelflut.delta_y = ARGV.shift.to_i
    else
      die!("invalid option - #{arg}") if Pixelflut.file_name
      Pixelflut.file_name = arg
    end
  end

  die!('<image> missing') unless Pixelflut.file_name
end

def use_processes(address, data)
  puts("#{$name}: start #{data.size} processes for #{data.sum(&:size)} bytes")
  data.size.times do |i|
    next unless fork
    data = data[i]
    GC.start
    $name = Process.setproctitle("#{$name}-#{'0' if i < 9}#{i + 1}")
    Pixelflut::Sender.send(address, data) do |size|
      puts("#{$name}: #{size} bytes")
    end
  end
end

def use_threads(address, data)
  puts("#{$name}: start #{data.size} threads for #{data.sum(&:size)} bytes")
  Thread.report_on_exception = false
  data.map! { |slice| Thread.start { Pixelflut::Sender.send(address, slice) } }
  GC.start
  data.each(&:join)
end

begin
  if Configuration.use_threads
    use_threads(Configuration.address, Pixelflut.data)
  else
    use_processes(Configuration.address, Pixelflut.data)
  end
rescue Errno::ECONNREFUSED
  die!('unable to connect', code: 2)
rescue Errno::EPIPE
  die!('connection lost', code: 2)
rescue SocketError => e
  die!(e, code: 3)
rescue LoadError => e
  die!(e, code: 4)
rescue Interrupt
  print("\b\b") if $stdout.tty?
  die!('aborted', code: 130)
end
