#!/usr/bin/env ruby
# frozen_string_literal: true

def options(cfg)
  require 'optparse'
  OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.banner = 'usage: pxf send [options] FILE'
    opts.separator(nil)
    opts.separator('valid options:')
    opts.on('-h', '--host HOST', String, 'target host name (default localhost)'){ |v| cfg[:host] = v }
    opts.on('-p', '--port PORT', Integer, 'target port (default 1234)'){ |v| cfg[:port] = v }
    opts.on('-c', '--connections COUNT', Integer, 'count of connections (default 8)'){ |v| cfg[:count] = v }
  end
end

def help(short)
  puts(options(nil), nil) unless short
  puts('Send given Pixelflut ASCII file to a server.')
  exit
end

def err(msg, code = 1)
  $stderr.puts("pxf: #{msg}")
  exit(code)
end

def create_options
  {port: 1234, count: 8}.tap{ |cfg| options(cfg).parse! }
rescue OptionParser::ParseError => e
  err(e)
end

help(false) if '--help' == ARGV[0]
help(true) if '--short-help' == ARGV[0]
options = create_options
require File.realdirpath('../../lib/pixelflut/client.rb', __FILE__)
begin
  Pixelflut::Client.new(options[:host], options[:port], ARGF.readlines, options[:count]).run
rescue SystemCallError => e
  err(e.message, 2)
rescue Interrupt
  exit
end
