#!/usr/bin/env ruby
# frozen_string_literal: true

def options(cfg)
  require 'optparse'
  OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.banner = 'usage: pxf convert [options] IMAGE'
    opts.separator(nil)
    opts.separator('valid options:')
    opts.on('-x', '--transpose-x X', Integer, 'transpose image X pixels'){ |v| cfg[:x_offset] = v }
    opts.on('-y', '--transpose-y Y', Integer, 'transpose image Y pixels'){ |v| cfg[:y_offset] = v }
    opts.on('-w', '--width WIDTH', Integer, 'resize the image to given WIDTH'){ |v| cfg[:width] = v }
    opts.on('-h', '--height HEIGHT', Integer, 'resize the image to given HEIGHT'){ |v| cfg[:height] = v }
  end
end

def help(short)
  puts(options(nil), nil) unless short
  puts('Convert given IMAGE file to Pixelflut format.')
  exit
end

def err(msg, code = 1)
  $stderr.puts("pxf: #{msg}")
  exit(code)
end

def create_options
  cfg = {}
  options(cfg).parse!
  cfg
rescue OptionParser::ParseError => e
  err(e)
end

help(false) if '--help' == ARGV[0]
help(true) if '--short-help' == ARGV[0]
err('too few arguments') if ARGV.empty?
options = create_options
require File.realdirpath('../../lib/pixelflut/converter.rb', __FILE__)
err('unable to load library - RMagick') unless Pixelflut::Converter::Avail
begin
  ARGV.each do |file_name|
    cvt = Pixelflut::Converter.new(file_name)
    cvt.x_offset = options[:x_offset] if options[:x_offset]
    cvt.y_offset = options[:y_offset] if options[:y_offset]
    cvt.resize_to(options[:width], options[:height]) if options[:width]
    cvt.each_line{ |line| puts(line) }
  end
rescue Pixelflut::Converter::Error => e
  err(e.message, 2)
rescue Interrupt
  exit
end
